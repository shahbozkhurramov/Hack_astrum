@page "/categoryItem/{categoryId}"
@using Entities
@inject ICategoryItemRepository iCategoryItemRepository
@inject ICategoryRepository iCategoryRepository

<section class="position-relative pb-0 pb-sm-5">
	<div class="container">
		<!-- Title -->
		<div class="row mb-4">
			<div class="col-lg-8 mx-auto text-center">
				<h2>@CategoryName</h2>
			</div>
		</div>

		<div class="row g-4">
			<!-- Item -->
            @foreach (var categoryItem in categoryItems)
            {
			<div class="col-sm-6 col-md-4 col-xl-3">
			<a href="/services/@categoryItem.Id">
				<div class="bg-primary bg-opacity-10 rounded-3 text-center p-3 position-relative btn-transition">
					<!-- Image -->
					<div class="icon-xl bg-body mx-auto mb-3">
						<img src="@categoryItem.CategoryItemImage" alt="category">
					</div>
					<!-- Title -->
					<h5 class="mb-1"><a type="button" class="stretched-link">@categoryItem.Name</a></h5>
					<span class="mb-0">@categoryItem.Services.Count xizmatlar</span>
				</div>
			</a>
			</div>
            }

		</div>
	</div>
</section>

@code{
    [Parameter]
    public string categoryId { get; set; }
    public string CategoryName { get; set; }
    private List<CategoryItem> categoryItems = new();
    protected override async Task OnParametersSetAsync()
    {
        categoryItems = (await iCategoryItemRepository.GetAllAsync()).Where(c => c.CategoryId == Guid.Parse(categoryId)).ToList();
        CategoryName = (await iCategoryRepository.GetAsync(Guid.Parse(categoryId))).Name;
        StateHasChanged();
    }
}